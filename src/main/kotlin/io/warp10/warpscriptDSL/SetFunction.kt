package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.difference(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DIFFERENCE"), init) 
} 

fun WarpScript.intersection(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("INTERSECTION"), init) 
} 

fun WarpScript.set(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SET"), init) 
} 

fun WarpScript.set(input: List<Any>, elem: Any, index: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to elem, 3 to index)
    return initTag(Functions("SET", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.set(input: List<Any>? = null, inputElements: Element.() -> Unit = emptyLambda, 
            elem: Any? = null, elemElements: Element.() -> Unit = emptyLambda, 
            index: Long? = null, indexElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to elem, 3 to index)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to inputElements, 2 to elemElements, 3 to indexElements)
    return initTag(Functions("SET", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.setTo(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SET->"), init) 
} 

fun WarpScript.toSet(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("->SET"), init) 
} 

fun WarpScript.toSet(value: List<Any>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("->SET", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toSet(value: List<Any>? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("->SET", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.union(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("UNION"), init) 
} 
