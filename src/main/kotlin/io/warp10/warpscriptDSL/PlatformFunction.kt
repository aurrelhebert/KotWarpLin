package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.closeSafeScript(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("S>"), init) 
} 

fun WarpScript.evalSecure(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("EVALSECURE"), init) 
} 

fun WarpScript.evalSecure(statement: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to statement)
    return initTag(Functions("EVALSECURE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.evalSecure(statement: String? = null, statementElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to statement)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to statementElements)
    return initTag(Functions("EVALSECURE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.header(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("HEADER"), init) 
} 

fun WarpScript.header(key: String, value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to key, 2 to value)
    return initTag(Functions("HEADER", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.header(key: String? = null, keyElements: Element.() -> Unit = emptyLambda, 
            value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to key, 2 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to keyElements, 2 to valueElements)
    return initTag(Functions("HEADER", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.ident(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("IDENT"), init) 
} 

fun WarpScript.jsonLoose(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("JSONLOOSE"), init) 
} 

fun WarpScript.jsonStrict(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("JSONSTRICT"), init) 
} 

fun WarpScript.limit(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("LIMIT"), init) 
} 

fun WarpScript.limit(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("LIMIT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.limit(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("LIMIT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.maxBuckets(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAXBUCKETS"), init) 
} 

fun WarpScript.maxBuckets(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MAXBUCKETS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.maxBuckets(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MAXBUCKETS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.maxDepth(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAXDEPTH"), init) 
} 

fun WarpScript.maxDepth(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MAXDEPTH", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.maxDepth(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MAXDEPTH", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.maxGts(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAXGTS"), init) 
} 

fun WarpScript.maxGts(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MAXGTS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.maxGts(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MAXGTS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.maxLoop(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAXLOOP"), init) 
} 

fun WarpScript.maxLoop(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MAXLOOP", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.maxLoop(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MAXLOOP", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.maxOps(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAXOPS"), init) 
} 

fun WarpScript.maxOps(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MAXOPS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.maxOps(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MAXOPS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.maxSymbols(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAXSYMBOLS"), init) 
} 

fun WarpScript.maxSymbols(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MAXSYMBOLS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.maxSymbols(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MAXSYMBOLS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.openSafeScript(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("<S"), init) 
} 

fun WarpScript.ops(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("OPS"), init) 
} 

fun WarpScript.restore(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RESTORE"), init) 
} 

fun WarpScript.rev(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("REV"), init) 
} 

fun WarpScript.save(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SAVE"), init) 
} 

fun WarpScript.secureKey(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SECUREKEY"), init) 
} 

fun WarpScript.secureKey(key: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to key)
    return initTag(Functions("SECUREKEY", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.secureKey(key: String? = null, keyElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to key)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to keyElements)
    return initTag(Functions("SECUREKEY", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.tokenInfo(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOKENINFO"), init) 
} 

fun WarpScript.tokenInfo(token: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token)
    return initTag(Functions("TOKENINFO", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.tokenInfo(token: String? = null, tokenElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tokenElements)
    return initTag(Functions("TOKENINFO", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.unsecure(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("UNSECURE"), init) 
} 

fun WarpScript.urlFetch(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("URLFETCH"), init) 
} 

fun WarpScript.webCall(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("WEBCALL"), init) 
} 

fun WarpScript.webCall(token: String, method: String, url: String, headers: HashMap<String,String>, body: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token, 2 to method, 3 to url, 4 to headers, 5 to body)
    return initTag(Functions("WEBCALL", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.webCall(token: String? = null, tokenElements: Element.() -> Unit = emptyLambda, 
            method: String? = null, methodElements: Element.() -> Unit = emptyLambda, 
            url: String? = null, urlElements: Element.() -> Unit = emptyLambda, 
            headers: HashMap<String,String>? = null, headersElements: Element.() -> Unit = emptyLambda, 
            body: String? = null, bodyElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token, 2 to method, 3 to url, 4 to headers, 5 to body)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tokenElements, 2 to methodElements, 3 to urlElements, 4 to headersElements, 5 to bodyElements)
    return initTag(Functions("WEBCALL", data, elements, this, emptyLambda), init) 
} 
