package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.append(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("APPEND"), init) 
} 

fun WarpScript.append(p1: List<Any>, p2: List<Any>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to p1, 2 to p2)
    return initTag(Functions("APPEND", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.append(p1: List<Any>? = null, p1Elements: Element.() -> Unit = emptyLambda, 
            p2: List<Any>? = null, p2Elements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to p1, 2 to p2)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to p1Elements, 2 to p2Elements)
    return initTag(Functions("APPEND", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.lSort(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("LSORT"), init) 
} 

fun WarpScript.lSort(input: List<Any>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input)
    return initTag(Functions("LSORT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.lSort(input: List<Any>? = null, inputElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to inputElements)
    return initTag(Functions("LSORT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.put(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("PUT"), init) 
} 

fun WarpScript.put(input: HashMap<Any,Any>, value: Any, key: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to value, 3 to key)
    return initTag(Functions("PUT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.put(input: HashMap<Any,Any>? = null, inputElements: Element.() -> Unit = emptyLambda, 
            value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            key: Any? = null, keyElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to value, 3 to key)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to inputElements, 2 to valueElements, 3 to keyElements)
    return initTag(Functions("PUT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.removeList(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("REMOVE"), init) 
} 

fun WarpScript.removeList(input: List<Any>, index: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to index)
    return initTag(Functions("REMOVE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.removeList(input: List<Any>? = null, inputElements: Element.() -> Unit = emptyLambda, 
            index: Any? = null, indexElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to index)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to inputElements, 2 to indexElements)
    return initTag(Functions("REMOVE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.removeMap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("REMOVE"), init) 
} 

fun WarpScript.removeMap(input: Map<Any,Any>, key: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to key)
    return initTag(Functions("REMOVE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.removeMap(input: Map<Any,Any>? = null, inputElements: Element.() -> Unit = emptyLambda, 
            key: Any? = null, keyElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input, 2 to key)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to inputElements, 2 to keyElements)
    return initTag(Functions("REMOVE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.reverse(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("REVERSE"), init) 
} 

fun WarpScript.reverse(input: List<Any>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input)
    return initTag(Functions("REVERSE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.reverse(input: List<Any>? = null, inputElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to input)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to inputElements)
    return initTag(Functions("REVERSE", data, elements, this, emptyLambda), init) 
} 
