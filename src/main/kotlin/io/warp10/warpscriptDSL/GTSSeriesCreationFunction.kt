package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.makeGTS(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MAKEGTS"), init) 
} 

fun WarpScript.makeGTS(timestamps: List<Long> = ArrayList<Long>(), latitudes: List<Double> = ArrayList<Double>(), longitudes: List<Double> = ArrayList<Double>(), elevation: List<Long> = ArrayList<Long>(), values: List<Any>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamps, 2 to latitudes, 3 to longitudes, 4 to elevation, 5 to values)
    return initTag(Functions("MAKEGTS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.makeGTS(timestamps: List<Long>? = null, timestampsElements: Element.() -> Unit = emptyLambda, 
            latitudes: List<Double>? = null, latitudesElements: Element.() -> Unit = emptyLambda, 
            longitudes: List<Double>? = null, longitudesElements: Element.() -> Unit = emptyLambda, 
            elevation: List<Long>? = null, elevationElements: Element.() -> Unit = emptyLambda, 
            values: List<Any>? = null, valuesElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamps, 2 to latitudes, 3 to longitudes, 4 to elevation, 5 to values)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampsElements, 2 to latitudesElements, 3 to longitudesElements, 4 to elevationElements, 5 to valuesElements)
    return initTag(Functions("MAKEGTS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.newGts(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NEWGTS"), init) 
} 

fun WarpScript.parse(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("PARSE"), init) 
} 

fun WarpScript.parse(timestamps: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamps)
    return initTag(Functions("PARSE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.parse(timestamps: String? = null, timestampsElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamps)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampsElements)
    return initTag(Functions("PARSE", data, elements, this, emptyLambda), init) 
} 
