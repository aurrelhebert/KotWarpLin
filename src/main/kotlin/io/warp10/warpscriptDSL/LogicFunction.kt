package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.assert(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ASSERT"), init) 
} 

fun WarpScript.assert(value: Boolean, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ASSERT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.assert(value: Boolean? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ASSERT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.breakWarp10(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("BREAK"), init) 
} 

fun WarpScript.continueWarp10(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("CONTINUE"), init) 
} 

fun WarpScript.defined(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DEFINED"), init) 
} 

fun WarpScript.defined(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("DEFINED", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.defined(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("DEFINED", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.definedMacro(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DEFINEDMACRO"), init) 
} 

fun WarpScript.definedMacro(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("DEFINEDMACRO", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.definedMacro(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("DEFINEDMACRO", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.eval(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("EVAL"), init) 
} 

fun WarpScript.eval(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("EVAL", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.eval(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("EVAL", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.fail(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("FAIL"), init) 
} 

fun WarpScript.msgFail(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MSGFAIL"), init) 
} 

fun WarpScript.msgFail(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("MSGFAIL", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.msgFail(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("MSGFAIL", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.nReturn(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NRETURN"), init) 
} 

fun WarpScript.nReturn(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("NRETURN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.nReturn(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("NRETURN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.returnWarp10(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RETURN"), init) 
} 

fun WarpScript.stop(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("STOP"), init) 
} 
