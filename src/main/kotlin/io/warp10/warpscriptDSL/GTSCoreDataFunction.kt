package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.addValue(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDVALUE"), init) 
} 

fun WarpScript.addValue(timestamp: Long, latitude: Double = Double.NaN, longitude: Double = Double.NaN, elevation: Number = Double.NaN, value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to latitude, 3 to longitude, 4 to elevation, 5 to value)
    return initTag(Functions("ADDVALUE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addValue(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            latitude: Double? = null, latitudeElements: Element.() -> Unit = emptyLambda, 
            longitude: Double? = null, longitudeElements: Element.() -> Unit = emptyLambda, 
            elevation: Number? = null, elevationElements: Element.() -> Unit = emptyLambda, 
            value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to latitude, 3 to longitude, 4 to elevation, 5 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to latitudeElements, 3 to longitudeElements, 4 to elevationElements, 5 to valueElements)
    return initTag(Functions("ADDVALUE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.atIndex(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ATINDEX"), init) 
} 

fun WarpScript.atIndex(index: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to index)
    return initTag(Functions("ATINDEX", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.atIndex(index: Long? = null, indexElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to index)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to indexElements)
    return initTag(Functions("ATINDEX", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.atTick(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ATTICK"), init) 
} 

fun WarpScript.atTick(timestamp: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    return initTag(Functions("ATTICK", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.atTick(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements)
    return initTag(Functions("ATTICK", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.firstTick(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("FIRSTTICK"), init) 
} 

fun WarpScript.lastTick(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("LASTTICK"), init) 
} 

fun WarpScript.setValue(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SETVALUE"), init) 
} 

fun WarpScript.setValue(timestamp: Long, latitude: Double = Double.NaN, longitude: Double = Double.NaN, elevation: Number = Double.NaN, value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to latitude, 3 to longitude, 4 to elevation, 5 to value)
    return initTag(Functions("SETVALUE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.setValue(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            latitude: Double? = null, latitudeElements: Element.() -> Unit = emptyLambda, 
            longitude: Double? = null, longitudeElements: Element.() -> Unit = emptyLambda, 
            elevation: Number? = null, elevationElements: Element.() -> Unit = emptyLambda, 
            value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to latitude, 3 to longitude, 4 to elevation, 5 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to latitudeElements, 3 to longitudeElements, 4 to elevationElements, 5 to valueElements)
    return initTag(Functions("SETVALUE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.tickIndex(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TICKINDEX"), init) 
} 

fun WarpScript.tickList(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TICKLIST"), init) 
} 

fun WarpScript.ticks(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TICKS"), init) 
} 

fun WarpScript.values(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("VALUES"), init) 
} 
