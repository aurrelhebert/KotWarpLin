package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.bitCount(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("BITCOUNT"), init) 
} 

fun WarpScript.bitGet(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("BITGET"), init) 
} 

fun WarpScript.bitGet(index: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to index)
    return initTag(Functions("BITGET", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.bitGet(index: Long? = null, indexElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to index)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to indexElements)
    return initTag(Functions("BITGET", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.bitsToBytes(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("BITSTOBYTES"), init) 
} 

fun WarpScript.bytesToBits(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("BYTESTOBITS"), init) 
} 

fun WarpScript.counter(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("COUNTER"), init) 
} 

fun WarpScript.counterDelta(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("COUNTERDELTA"), init) 
} 

fun WarpScript.counterDelta(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("COUNTERDELTA", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.counterDelta(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("COUNTERDELTA", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.counterValue(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("COUNTERVALUE"), init) 
} 

fun WarpScript.range(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RANGE"), init) 
} 

fun WarpScript.range(rangeList: List<Number>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to rangeList)
    return initTag(Functions("RANGE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.range(rangeList: List<Number>? = null, rangeListElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to rangeList)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to rangeListElements)
    return initTag(Functions("RANGE", data, elements, this, emptyLambda), init) 
} 
