package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.acos(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ACOS"), init) 
} 

fun WarpScript.acos(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ACOS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.acos(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ACOS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.asin(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ASIN"), init) 
} 

fun WarpScript.asin(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ASIN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.asin(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ASIN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.atan(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ATAN"), init) 
} 

fun WarpScript.atan(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ATAN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.atan(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ATAN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.cos(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("COS"), init) 
} 

fun WarpScript.cos(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("COS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.cos(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("COS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.cosh(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("COSH"), init) 
} 

fun WarpScript.cosh(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("COSH", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.cosh(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("COSH", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.sin(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SIN"), init) 
} 

fun WarpScript.sin(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("SIN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.sin(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("SIN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.sinh(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SINH"), init) 
} 

fun WarpScript.sinh(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("SINH", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.sinh(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("SINH", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.tan(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TAN"), init) 
} 

fun WarpScript.tan(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TAN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.tan(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TAN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.tanh(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TANH"), init) 
} 

fun WarpScript.tanh(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TANH", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.tanh(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TANH", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toDegrees(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TODEGREES"), init) 
} 

fun WarpScript.toDegrees(radians: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to radians)
    return initTag(Functions("TODEGREES", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toDegrees(radians: Number? = null, radiansElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to radians)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to radiansElements)
    return initTag(Functions("TODEGREES", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toRadians(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TORADIANS"), init) 
} 

fun WarpScript.toRadians(degrees: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to degrees)
    return initTag(Functions("TORADIANS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toRadians(degrees: Number? = null, degreesElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to degrees)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to degreesElements)
    return initTag(Functions("TORADIANS", data, elements, this, emptyLambda), init) 
} 
