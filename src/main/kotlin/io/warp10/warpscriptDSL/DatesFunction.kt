package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.addDays(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDDAYS"), init) 
} 

fun WarpScript.addDays(timestamp: Long, NumberOfDaysToAdd: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to NumberOfDaysToAdd)
    return initTag(Functions("ADDDAYS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addDays(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            NumberOfDaysToAdd: Long? = null, NumberOfDaysToAddElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to NumberOfDaysToAdd)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to NumberOfDaysToAddElements)
    return initTag(Functions("ADDDAYS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.addDaysWithTimeZone(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDDAYS"), init) 
} 

fun WarpScript.addDaysWithTimeZone(timestamp: Long, timeZone: String, NumberOfDaysToAdd: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone, 3 to NumberOfDaysToAdd)
    return initTag(Functions("ADDDAYS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addDaysWithTimeZone(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            timeZone: String? = null, timeZoneElements: Element.() -> Unit = emptyLambda, 
            NumberOfDaysToAdd: Long? = null, NumberOfDaysToAddElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone, 3 to NumberOfDaysToAdd)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to timeZoneElements, 3 to NumberOfDaysToAddElements)
    return initTag(Functions("ADDDAYS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.addMonths(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDMONTHS"), init) 
} 

fun WarpScript.addMonths(timestamp: Long, NumberOfMonthsToAdd: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to NumberOfMonthsToAdd)
    return initTag(Functions("ADDMONTHS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addMonths(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            NumberOfMonthsToAdd: Long? = null, NumberOfMonthsToAddElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to NumberOfMonthsToAdd)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to NumberOfMonthsToAddElements)
    return initTag(Functions("ADDMONTHS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.addMonthsWithTimeZone(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDMONTHS"), init) 
} 

fun WarpScript.addMonthsWithTimeZone(timestamp: Long, timeZone: String, NumberOfMonthsToAdd: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone, 3 to NumberOfMonthsToAdd)
    return initTag(Functions("ADDMONTHS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addMonthsWithTimeZone(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            timeZone: String? = null, timeZoneElements: Element.() -> Unit = emptyLambda, 
            NumberOfMonthsToAdd: Long? = null, NumberOfMonthsToAddElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone, 3 to NumberOfMonthsToAdd)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to timeZoneElements, 3 to NumberOfMonthsToAddElements)
    return initTag(Functions("ADDMONTHS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.addYears(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDYEARS"), init) 
} 

fun WarpScript.addYears(timestamp: Long, NumberOfYearsToAdd: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to NumberOfYearsToAdd)
    return initTag(Functions("ADDYEARS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addYears(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            NumberOfYearsToAdd: Long? = null, NumberOfYearsToAddElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to NumberOfYearsToAdd)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to NumberOfYearsToAddElements)
    return initTag(Functions("ADDYEARS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.addYearsWithTimeZone(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ADDYEARS"), init) 
} 

fun WarpScript.addYearsWithTimeZone(timestamp: Long, timeZone: String, NumberOfYearsToAdd: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone, 3 to NumberOfYearsToAdd)
    return initTag(Functions("ADDYEARS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.addYearsWithTimeZone(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            timeZone: String? = null, timeZoneElements: Element.() -> Unit = emptyLambda, 
            NumberOfYearsToAdd: Long? = null, NumberOfYearsToAddElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone, 3 to NumberOfYearsToAdd)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to timeZoneElements, 3 to NumberOfYearsToAddElements)
    return initTag(Functions("ADDYEARS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.ago(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("AGO"), init) 
} 

fun WarpScript.ago(duration: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to duration)
    return initTag(Functions("AGO", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.ago(duration: Long? = null, durationElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to duration)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to durationElements)
    return initTag(Functions("AGO", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.duration(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DURATION"), init) 
} 

fun WarpScript.duration(ISO8601Duration: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to ISO8601Duration)
    return initTag(Functions("DURATION", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.duration(ISO8601Duration: String? = null, ISO8601DurationElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to ISO8601Duration)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to ISO8601DurationElements)
    return initTag(Functions("DURATION", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.humanDuration(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("HUMANDURATION"), init) 
} 

fun WarpScript.humanDuration(timeUnit: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timeUnit)
    return initTag(Functions("HUMANDURATION", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.humanDuration(timeUnit: Long? = null, timeUnitElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timeUnit)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timeUnitElements)
    return initTag(Functions("HUMANDURATION", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.iso8601(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ISO8601"), init) 
} 

fun WarpScript.iso8601(timestamp: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    return initTag(Functions("ISO8601", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.iso8601(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements)
    return initTag(Functions("ISO8601", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.msTU(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MSTU"), init) 
} 

fun WarpScript.notAfter(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NOTAFTER"), init) 
} 

fun WarpScript.notAfter(timestamp: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    return initTag(Functions("NOTAFTER", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.notAfter(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements)
    return initTag(Functions("NOTAFTER", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.notBefore(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NOTBEFORE"), init) 
} 

fun WarpScript.notBefore(timestamp: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    return initTag(Functions("NOTBEFORE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.notBefore(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements)
    return initTag(Functions("NOTBEFORE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.now(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NOW"), init) 
} 

fun WarpScript.sTU(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("STU"), init) 
} 

fun WarpScript.toTsElements(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("->TSELEMENTS"), init) 
} 

fun WarpScript.toTsElements(timestamp: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    return initTag(Functions("->TSELEMENTS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toTsElements(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements)
    return initTag(Functions("->TSELEMENTS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toTsElementsWithTimeZone(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("->TSELEMENTS"), init) 
} 

fun WarpScript.toTsElementsWithTimeZone(timestamp: Long, timeZone: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone)
    return initTag(Functions("->TSELEMENTS", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toTsElementsWithTimeZone(timestamp: Long? = null, timestampElements: Element.() -> Unit = emptyLambda, 
            timeZone: String? = null, timeZoneElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to timestamp, 2 to timeZone)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to timestampElements, 2 to timeZoneElements)
    return initTag(Functions("->TSELEMENTS", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.tsElementTo(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TSELEMENTS->"), init) 
} 

fun WarpScript.tsElementTo(tsElementsList: List<Number>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to tsElementsList)
    return initTag(Functions("TSELEMENTS->", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.tsElementTo(tsElementsList: List<Number>? = null, tsElementsListElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to tsElementsList)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tsElementsListElements)
    return initTag(Functions("TSELEMENTS->", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.tsElementToWithTimeZone(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TSELEMENTS->"), init) 
} 

fun WarpScript.tsElementToWithTimeZone(tsElementsList: List<Number>, timeZone: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to tsElementsList, 2 to timeZone)
    return initTag(Functions("TSELEMENTS->", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.tsElementToWithTimeZone(tsElementsList: List<Number>? = null, tsElementsListElements: Element.() -> Unit = emptyLambda, 
            timeZone: String? = null, timeZoneElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to tsElementsList, 2 to timeZone)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tsElementsListElements, 2 to timeZoneElements)
    return initTag(Functions("TSELEMENTS->", data, elements, this, emptyLambda), init) 
} 
