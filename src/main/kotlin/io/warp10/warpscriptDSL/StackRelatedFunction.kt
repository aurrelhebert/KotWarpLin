package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.authenticate(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("AUTHENTICATE"), init) 
} 

fun WarpScript.authenticate(token: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token)
    return initTag(Functions("AUTHENTICATE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.authenticate(token: String? = null, tokenElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tokenElements)
    return initTag(Functions("AUTHENTICATE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.bootstrap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("BOOTSTRAP"), init) 
} 

fun WarpScript.clear(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("CLEAR"), init) 
} 

fun WarpScript.clearDefs(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("CLEARDEFS"), init) 
} 

fun WarpScript.clearSymbols(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("CLEARSYMBOLS"), init) 
} 

fun WarpScript.clearToMark(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("CLEARTOMARK"), init) 
} 

fun WarpScript.closeList(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("]"), init) 
} 

fun WarpScript.closeMacro(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("%>"), init) 
} 

fun WarpScript.closeMap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("}"), init) 
} 

fun WarpScript.countToMark(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("COUNTTOMARK"), init) 
} 

fun WarpScript.debugoff(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DEBUGOFF"), init) 
} 

fun WarpScript.debugon(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DEBUGON"), init) 
} 

fun WarpScript.def(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DEF"), init) 
} 

fun WarpScript.def(name: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    return initTag(Functions("DEF", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.def(name: String? = null, nameElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nameElements)
    return initTag(Functions("DEF", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.depth(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DEPTH"), init) 
} 

fun WarpScript.doc(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DOC"), init) 
} 

fun WarpScript.doc(documentation: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to documentation)
    return initTag(Functions("DOC", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.doc(documentation: String? = null, documentationElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to documentation)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to documentationElements)
    return initTag(Functions("DOC", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.docMode(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DOCMODE"), init) 
} 

fun WarpScript.drop(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DROP"), init) 
} 

fun WarpScript.dropn(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DROPN"), init) 
} 

fun WarpScript.dropn(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("DROPN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.dropn(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("DROPN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.dup(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DUP"), init) 
} 

fun WarpScript.dup(value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("DUP", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.dup(value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("DUP", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.dupn(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("DUPN"), init) 
} 

fun WarpScript.dupn(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("DUPN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.dupn(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("DUPN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.elapsed(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ELAPSED"), init) 
} 

fun WarpScript.exportList(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("EXPORT"), init) 
} 

fun WarpScript.exportList(values: List<String>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to values)
    return initTag(Functions("EXPORT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.exportList(values: List<String>? = null, valuesElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to values)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valuesElements)
    return initTag(Functions("EXPORT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.exportSymbol(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("EXPORT"), init) 
} 

fun WarpScript.exportSymbol(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("EXPORT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.exportSymbol(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("EXPORT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.forget(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("FORGET"), init) 
} 

fun WarpScript.forget(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("FORGET", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.forget(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("FORGET", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.mark(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MARK"), init) 
} 

fun WarpScript.nDebugOn(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NDEBUGON"), init) 
} 

fun WarpScript.nDebugOn(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("NDEBUGON", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.nDebugOn(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("NDEBUGON", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.noTimings(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NOTIMINGS"), init) 
} 

fun WarpScript.openList(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("["), init) 
} 

fun WarpScript.openMacro(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("<%"), init) 
} 

fun WarpScript.openMap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("{"), init) 
} 

fun WarpScript.pick(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("PICK"), init) 
} 

fun WarpScript.pick(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("PICK", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.pick(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("PICK", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rExec(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("REXEC"), init) 
} 

fun WarpScript.rExec(code: String, url: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to code, 2 to url)
    return initTag(Functions("REXEC", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.rExec(code: String? = null, codeElements: Element.() -> Unit = emptyLambda, 
            url: String? = null, urlElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to code, 2 to url)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to codeElements, 2 to urlElements)
    return initTag(Functions("REXEC", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.reset(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RESET"), init) 
} 

fun WarpScript.reset(depth: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to depth)
    return initTag(Functions("RESET", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.reset(depth: Long? = null, depthElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to depth)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to depthElements)
    return initTag(Functions("RESET", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.roll(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ROLL"), init) 
} 

fun WarpScript.roll(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("ROLL", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.roll(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("ROLL", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rollD(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ROLLD"), init) 
} 

fun WarpScript.rollD(n: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    return initTag(Functions("ROLLD", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.rollD(n: Long? = null, nElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to n)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nElements)
    return initTag(Functions("ROLLD", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rot(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ROT"), init) 
} 

fun WarpScript.run(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RUN"), init) 
} 

fun WarpScript.run(name: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    return initTag(Functions("RUN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.run(name: String? = null, nameElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nameElements)
    return initTag(Functions("RUN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.snapshot(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SNAPSHOT"), init) 
} 

fun WarpScript.snapshotAll(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SNAPSHOTALL"), init) 
} 

fun WarpScript.snapshotAllToMark(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SNAPSHOTALLTOMARK"), init) 
} 

fun WarpScript.snapshotToMark(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SNAPSHOTTOMARK"), init) 
} 

fun WarpScript.stackAttribute(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("STACKATTRIBUTE"), init) 
} 

fun WarpScript.stackAttribute(attribute: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to attribute)
    return initTag(Functions("STACKATTRIBUTE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.stackAttribute(attribute: String? = null, attributeElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to attribute)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to attributeElements)
    return initTag(Functions("STACKATTRIBUTE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.stackToList(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("STACKTOLIST"), init) 
} 

fun WarpScript.swap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SWAP"), init) 
} 

fun WarpScript.timings(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TIMINGS"), init) 
} 

fun WarpScript.typeOf(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TYPEOF"), init) 
} 

fun WarpScript.typeOf(element: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to element)
    return initTag(Functions("TYPEOF", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.typeOf(element: Any? = null, elementElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to element)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to elementElements)
    return initTag(Functions("TYPEOF", data, elements, this, emptyLambda), init) 
} 
