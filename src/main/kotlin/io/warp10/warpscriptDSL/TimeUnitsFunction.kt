package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.d(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("d"), init) 
} 

fun WarpScript.d(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("d", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.d(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("d", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.h(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("h"), init) 
} 

fun WarpScript.h(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("h", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.h(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("h", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.m(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("m"), init) 
} 

fun WarpScript.m(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("m", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.m(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("m", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.ms(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ms"), init) 
} 

fun WarpScript.ms(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ms", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.ms(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ms", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.ns(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ns"), init) 
} 

fun WarpScript.ns(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ns", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.ns(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ns", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.ps(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ps"), init) 
} 

fun WarpScript.ps(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("ps", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.ps(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("ps", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.s(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("s"), init) 
} 

fun WarpScript.s(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("s", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.s(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("s", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.us(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("us"), init) 
} 

fun WarpScript.us(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("us", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.us(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("us", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.w(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("w"), init) 
} 

fun WarpScript.w(value: Number, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("w", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.w(value: Number? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("w", data, elements, this, emptyLambda), init) 
} 
