package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.attributes(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ATTRIBUTES"), init) 
} 

fun WarpScript.labels(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("LABELS"), init) 
} 

fun WarpScript.meta(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("META"), init) 
} 

fun WarpScript.meta(token: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token)
    return initTag(Functions("META", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.meta(token: String? = null, tokenElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to token)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tokenElements)
    return initTag(Functions("META", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.metaSort(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("METASORT"), init) 
} 

fun WarpScript.metaSort(metaData: List<String>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to metaData)
    return initTag(Functions("METASORT", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.metaSort(metaData: List<String>? = null, metaDataElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to metaData)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to metaDataElements)
    return initTag(Functions("METASORT", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.name(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("NAME"), init) 
} 

fun WarpScript.parseSelector(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("PARSESELECTOR"), init) 
} 

fun WarpScript.parseSelector(selector: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to selector)
    return initTag(Functions("PARSESELECTOR", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.parseSelector(selector: String? = null, selectorElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to selector)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to selectorElements)
    return initTag(Functions("PARSESELECTOR", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.relabel(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RELABEL"), init) 
} 

fun WarpScript.relabel(labels: HashMap<String,String>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to labels)
    return initTag(Functions("RELABEL", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.relabel(labels: HashMap<String,String>? = null, labelsElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to labels)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to labelsElements)
    return initTag(Functions("RELABEL", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rename(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RENAME"), init) 
} 

fun WarpScript.rename(name: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    return initTag(Functions("RENAME", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.rename(name: String? = null, nameElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nameElements)
    return initTag(Functions("RENAME", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.setAttributes(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SETATTRIBUTES"), init) 
} 

fun WarpScript.setAttributes(name: HashMap<String,String>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    return initTag(Functions("SETATTRIBUTES", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.setAttributes(name: HashMap<String,String>? = null, nameElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to name)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to nameElements)
    return initTag(Functions("SETATTRIBUTES", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toSelector(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOSELECTOR"), init) 
} 
