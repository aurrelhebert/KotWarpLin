package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.esdTest(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ESDTEST"), init) 
} 

fun WarpScript.esdTest(k: Long, mad: Boolean, alpha: Double = 0.5, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to k, 2 to mad, 3 to alpha)
    return initTag(Functions("ESDTEST", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.esdTest(k: Long? = null, kElements: Element.() -> Unit = emptyLambda, 
            mad: Boolean? = null, madElements: Element.() -> Unit = emptyLambda, 
            alpha: Double? = null, alphaElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to k, 2 to mad, 3 to alpha)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to kElements, 2 to madElements, 3 to alphaElements)
    return initTag(Functions("ESDTEST", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.grubbsTest(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("GRUBBSTEST"), init) 
} 

fun WarpScript.grubbsTest(mad: Boolean, alpha: Double = 0.5, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to mad, 2 to alpha)
    return initTag(Functions("GRUBBSTEST", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.grubbsTest(mad: Boolean? = null, madElements: Element.() -> Unit = emptyLambda, 
            alpha: Double? = null, alphaElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to mad, 2 to alpha)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to madElements, 2 to alphaElements)
    return initTag(Functions("GRUBBSTEST", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.hybridTest(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("HYBRIDTEST"), init) 
} 

fun WarpScript.hybridTest(period: Long, piece: Long, k: Long, alpha: Double = 0.5, parameters: HashMap<Any,Any>?, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to period, 2 to piece, 3 to k, 4 to alpha, 5 to parameters)
    return initTag(Functions("HYBRIDTEST", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.hybridTest(period: Long? = null, periodElements: Element.() -> Unit = emptyLambda, 
            piece: Long? = null, pieceElements: Element.() -> Unit = emptyLambda, 
            k: Long? = null, kElements: Element.() -> Unit = emptyLambda, 
            alpha: Double? = null, alphaElements: Element.() -> Unit = emptyLambda, 
            parameters: HashMap<Any,Any>?? = null, parametersElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to period, 2 to piece, 3 to k, 4 to alpha, 5 to parameters)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to periodElements, 2 to pieceElements, 3 to kElements, 4 to alphaElements, 5 to parametersElements)
    return initTag(Functions("HYBRIDTEST", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.hybridTest2(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("HYBRIDTEST2"), init) 
} 

fun WarpScript.hybridTest2(period: Long, piece: Long, k: Long, alpha: Double = 0.5, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to period, 2 to piece, 3 to k, 4 to alpha)
    return initTag(Functions("HYBRIDTEST2", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.hybridTest2(period: Long? = null, periodElements: Element.() -> Unit = emptyLambda, 
            piece: Long? = null, pieceElements: Element.() -> Unit = emptyLambda, 
            k: Long? = null, kElements: Element.() -> Unit = emptyLambda, 
            alpha: Double? = null, alphaElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to period, 2 to piece, 3 to k, 4 to alpha)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to periodElements, 2 to pieceElements, 3 to kElements, 4 to alphaElements)
    return initTag(Functions("HYBRIDTEST2", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.stlesdTest(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("STLESDTEST"), init) 
} 

fun WarpScript.stlesdTest(p: Long, k: Long, alpha: Double = 0.5, parameters: HashMap<Any,Any>?, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to p, 2 to k, 3 to alpha, 4 to parameters)
    return initTag(Functions("STLESDTEST", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.stlesdTest(p: Long? = null, pElements: Element.() -> Unit = emptyLambda, 
            k: Long? = null, kElements: Element.() -> Unit = emptyLambda, 
            alpha: Double? = null, alphaElements: Element.() -> Unit = emptyLambda, 
            parameters: HashMap<Any,Any>?? = null, parametersElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to p, 2 to k, 3 to alpha, 4 to parameters)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to pElements, 2 to kElements, 3 to alphaElements, 4 to parametersElements)
    return initTag(Functions("STLESDTEST", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.thresholdTest(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("THRESHOLDTEST"), init) 
} 

fun WarpScript.thresholdTest(t: Double, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to t)
    return initTag(Functions("THRESHOLDTEST", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.thresholdTest(t: Double? = null, tElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to t)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to tElements)
    return initTag(Functions("THRESHOLDTEST", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.zScoreTest(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("ZSCORETEST"), init) 
} 

fun WarpScript.zScoreTest(mad: Boolean, t: Double = 3.5, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to mad, 2 to t)
    return initTag(Functions("ZSCORETEST", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.zScoreTest(mad: Boolean? = null, madElements: Element.() -> Unit = emptyLambda, 
            t: Double? = null, tElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to mad, 2 to t)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to madElements, 2 to tElements)
    return initTag(Functions("ZSCORETEST", data, elements, this, emptyLambda), init) 
} 
