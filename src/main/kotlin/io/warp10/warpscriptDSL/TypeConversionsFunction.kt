package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.jsonTo(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("JSON->"), init) 
} 

fun WarpScript.jsonTo(jsonString: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to jsonString)
    return initTag(Functions("JSON->", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.jsonTo(jsonString: String? = null, jsonStringElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to jsonString)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to jsonStringElements)
    return initTag(Functions("JSON->", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.pickleTo(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("PICKLE->"), init) 
} 

fun WarpScript.toBin(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOBIN"), init) 
} 

fun WarpScript.toBin(value: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TOBIN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toBin(value: Long? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TOBIN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toBoolean(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOBOOLEAN"), init) 
} 

fun WarpScript.toBoolean(value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TOBOOLEAN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toBoolean(value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TOBOOLEAN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toDouble(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TODOUBLE"), init) 
} 

fun WarpScript.toDouble(value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TODOUBLE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toDouble(value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TODOUBLE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toJson(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("->JSON"), init) 
} 

fun WarpScript.toJson(item: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to item)
    return initTag(Functions("->JSON", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toJson(item: Any? = null, itemElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to item)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to itemElements)
    return initTag(Functions("->JSON", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toLong(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOLONG"), init) 
} 

fun WarpScript.toLong(value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TOLONG", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toLong(value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TOLONG", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toPickle(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("->PICKLE"), init) 
} 

fun WarpScript.toPickle(pickle: HashMap<Any,Any>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to pickle)
    return initTag(Functions("->PICKLE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toPickle(pickle: HashMap<Any,Any>? = null, pickleElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to pickle)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to pickleElements)
    return initTag(Functions("->PICKLE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toString(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOSTRING"), init) 
} 

fun WarpScript.toString(value: Any, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TOSTRING", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toString(value: Any? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TOSTRING", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.toTimestamp(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("TOTIMESTAMP"), init) 
} 

fun WarpScript.toTimestamp(value: String, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    return initTag(Functions("TOTIMESTAMP", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.toTimestamp(value: String? = null, valueElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to value)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to valueElements)
    return initTag(Functions("TOTIMESTAMP", data, elements, this, emptyLambda), init) 
} 
