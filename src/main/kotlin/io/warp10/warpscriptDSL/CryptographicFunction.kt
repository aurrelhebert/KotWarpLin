package io.warp10.warpscriptDSL
 
// 
// WarpScript KOTLINDSL
// @author aurrelhebert 
// @license apache 2.0 
// 
 
// Autogenerated code
 
fun WarpScript.aesUnwrap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("AESUNWRAP"), init) 
} 

fun WarpScript.aesWrap(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("AESWRAP"), init) 
} 

fun WarpScript.md5(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("MD5"), init) 
} 

fun WarpScript.rsaDecrypt(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSADECRYPT"), init) 
} 

fun WarpScript.rsaEncrypt(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSAENCRYPT"), init) 
} 

fun WarpScript.rsaGen(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSAGEN"), init) 
} 

fun WarpScript.rsaGen(exponent: String, keyLength: Long, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to exponent, 2 to keyLength)
    return initTag(Functions("RSAGEN", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.rsaGen(exponent: String? = null, exponentElements: Element.() -> Unit = emptyLambda, 
            keyLength: Long? = null, keyLengthElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to exponent, 2 to keyLength)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to exponentElements, 2 to keyLengthElements)
    return initTag(Functions("RSAGEN", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rsaPrivate(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSAPRIVATE"), init) 
} 

fun WarpScript.rsaPrivate(parameter: HashMap<String,String>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to parameter)
    return initTag(Functions("RSAPRIVATE", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.rsaPrivate(parameter: HashMap<String,String>? = null, parameterElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to parameter)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to parameterElements)
    return initTag(Functions("RSAPRIVATE", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rsaPublic(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSAPUBLIC"), init) 
} 

fun WarpScript.rsaPublic(parameter: HashMap<String,String>, init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to parameter)
    return initTag(Functions("RSAPUBLIC", data, HashMap(), this, emptyLambda), init) 
} 

fun WarpScript.rsaPublic(parameter: HashMap<String,String>? = null, parameterElements: Element.() -> Unit = emptyLambda, 
            init: Element.() -> Unit = {}) : Functions {
    val data = hashMapOf<Number, Any?>(1 to parameter)
    val elements = hashMapOf<Number, Element.() -> Unit>(1 to parameterElements)
    return initTag(Functions("RSAPUBLIC", data, elements, this, emptyLambda), init) 
} 

fun WarpScript.rsaSign(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSASIGN"), init) 
} 

fun WarpScript.rsaVerify(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("RSAVERIFY"), init) 
} 

fun WarpScript.sha1(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SHA1"), init) 
} 

fun WarpScript.sha1Hmac(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SHA1HMAC"), init) 
} 

fun WarpScript.sha256(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SHA256"), init) 
} 

fun WarpScript.sha256Hmac(init: Element.() -> Unit = {}) : Functions {
    return initTag(Functions("SHA256HMAC"), init) 
} 
