package io.warp10.generator

import java.io.File

//
// WarpScript KOTLINDSL
// @author aurrelhebert
// @license apache 2.0
//

//
// Standalone Map
//
val standaloneFunctions: HashMap<String, String> = hashMapOf(
        "drop" to "DROP",
        "now" to "NOW",
        "swap" to "SWAP",
        "stop" to "STOP",
        "clear" to "CLEAR",
        "sort" to "SORT",
        "nullWarp" to "NULL",
        "eval" to "EVAL",
        "evalSecure" to "EVALSecure",
        "snapshot" to "SNAPSHOT",
        "snapshotAll" to "SNAPSHOTALL",
        "loadWarp" to "LOAD",
        "run" to "RUN"
        )

//
// First WarpScript commands generator
//

fun main(args: Array<String>) {

    val standaloneData = StringBuilder()

    // Generate Headers
    standaloneData.append("package io.warp10.warpscriptDSL\n \n// \n// WarpScript KOTLINDSL\n")
    standaloneData.append("// @author aurrelhebert \n// @license apache 2.0 \n// \n \n")
    standaloneData.append("// Autogenerated code\n \n")

    for ((k,v) in standaloneFunctions) {
        standaloneData.append(writeStandaloneFunction(k,v))
        standaloneData.append("\n")
    }

	val file = File("src/io/warp10/warpscriptDSL/Standalone.kt")
    file.writeText(standaloneData.toString())

}

//
// Standalone function Kotlin code
//

private fun writeStandaloneFunction(javaName: String, warpScriptName: String ): String {
    val render = StringBuilder()
    render.append("fun WarpScript." + javaName + "() : Functions {\n")
    render.append("    return initTag(Functions(\"" + warpScriptName + "\"), {}) \n")
    render.append("} \n")
    return render.toString()
}